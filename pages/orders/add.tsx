import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { doc, getDoc } from "firebase/firestore";
import styles from "../../styles/Home.module.css";
import { OrderFormValues, OrderStatus } from "../../models/order";
import { Button, Col, Form, Row } from "react-bootstrap";
import { db } from "../../firebase";
import Link from "next/link";

const Orders: NextPage = () => {
  const [isOrdersLoading, setOrdersLoading] = useState(true);
  const defaultValues: OrderFormValues = {
    price: 0,
    description: "",
    status: OrderStatus.inProgress,
    createdAt: new Date(),
    completedAt: new Date(),
    payment: "",
    products: [],
  };

  const [formValues, setFormValues] = useState(defaultValues);

  const handleInputChange = (e: any) => {
    const { name, value } = e.target;
    setFormValues({
      ...formValues,
      [name]: value,
    });
  };

  const handleSubmit = (event: any) => {
    event.preventDefault();
    console.log(formValues);
  };

  useEffect(() => {
    const docRef = doc(db, "orders", "test");
    getDoc(docRef).then((doc) => {
      console.log(doc.data());
    });
  });

  const toDateInputValue = (date: Date) => {
    const local = new Date(date);
    local.setMinutes(date.getMinutes() - date.getTimezoneOffset());
    return local.toJSON().slice(0, 10);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Row>
        <Col>
          <Link href={"/orders"}>
            <Button
              className="float-start"
              style={{ transform: "translateY(5px)" }}
            >
              Back
            </Button>
          </Link>
          <h1 className="mb-5 float-start" style={{ marginLeft: "10px" }}>
            Add order
          </h1>
        </Col>
      </Row>
      <Form>
        <Form.Group className="mb-4">
          <Form.Label>Price</Form.Label>
          <Form.Control type="number" placeholder="Enter price" />
        </Form.Group>
        <Form.Group className="mb-4">
          <Form.Label>Description</Form.Label>
          <Form.Control type="number" placeholder="Enter description" />
        </Form.Group>
        <Form.Group className="mb-4">
          <Form.Label>Status</Form.Label>
          <Form.Select placeholder="Enter status">
            {Object.keys(OrderStatus).map((value: string) => (
              <option
                key="value"
                selected={formValues.status === value.toUpperCase()}
              >
                {value}
              </option>
            ))}
          </Form.Select>
        </Form.Group>
        <Form.Group className="mb-4">
          <Form.Label>Created At</Form.Label>
          <Form.Control
            type="date"
            value={toDateInputValue(new Date(formValues.createdAt))}
          />
        </Form.Group>
        <Form.Group className="mb-4">
          <Form.Label>Completed At</Form.Label>
          <Form.Control
            type="date"
            value={toDateInputValue(new Date(formValues.completedAt))}
          />
        </Form.Group>
        {/* TODO */}
        <Form.Group className="mb-4">
          <Form.Label>Payment</Form.Label>
          <Form.Control type="number" placeholder="Enter Payment" />
        </Form.Group>
        {/* TODO */}
        <Form.Group className="mb-4">
          <Form.Label>Products</Form.Label>
          <Form.Control type="number" placeholder="Enter Products" />
        </Form.Group>
        <Button variant="primary" type="submit">
          Submit
        </Button>
      </Form>
    </div>
  );
};

export default Orders;
